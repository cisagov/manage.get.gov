# Generated by Django 4.2.20 on 2025-10-27 17:06

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import registrar.models.dns.dns_soa


class Migration(migrations.Migration):

    dependencies = [
        ("registrar", "0161_dnsaccount_vendordnsaccount_is_active_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="DnsSoa",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("mname", models.CharField(blank=True, default=None, null=True)),
                ("rname", models.CharField(blank=True, default="dns.cloudflare.com")),
                (
                    "refresh",
                    models.PositiveIntegerField(
                        blank=True,
                        default=10000,
                        validators=[
                            django.core.validators.MinValueValidator(600),
                            django.core.validators.MaxValueValidator(86400),
                        ],
                    ),
                ),
                (
                    "retry",
                    models.PositiveIntegerField(
                        blank=True,
                        default=10000,
                        validators=[
                            django.core.validators.MinValueValidator(600),
                            django.core.validators.MaxValueValidator(86400),
                        ],
                    ),
                ),
                (
                    "expire",
                    models.PositiveIntegerField(
                        blank=True,
                        default=604800,
                        validators=[
                            django.core.validators.MinValueValidator(86400),
                            django.core.validators.MaxValueValidator(2419200),
                        ],
                    ),
                ),
                (
                    "min_ttl",
                    models.PositiveIntegerField(
                        blank=True,
                        default=1800,
                        validators=[
                            django.core.validators.MinValueValidator(60),
                            django.core.validators.MaxValueValidator(86400),
                        ],
                    ),
                ),
                (
                    "ttl",
                    models.PositiveIntegerField(
                        blank=True,
                        default=3600,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(86400),
                        ],
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="dnszone",
            name="flatten_all_cnames",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="dnszone",
            name="foundation_dns",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="dnszone",
            name="multiprovider",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="dnszone",
            name="name",
            field=models.CharField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="dnszone",
            name="nameservers",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(), blank=True, null=True, size=None
            ),
        ),
        migrations.AddField(
            model_name="dnszone",
            name="ns_ttl",
            field=models.PositiveIntegerField(default=86400),
        ),
        migrations.AddField(
            model_name="dnszone",
            name="secondary_overrides",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="dnszone",
            name="zone_mode",
            field=models.CharField(
                choices=[("standard", "Standard"), ("cdn_only", "CDN Only"), ("dns_only", "DNS Only")],
                default="standard",
            ),
        ),
        migrations.AddField(
            model_name="dnszone_vendordnszone",
            name="is_active",
            field=models.BooleanField(default=True),
        ),
        migrations.AddConstraint(
            model_name="dnszone_vendordnszone",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True)),
                fields=("dns_zone",),
                name="unique_active_vendor_zone_per_dns_zone",
            ),
        ),
        migrations.AddField(
            model_name="dnszone",
            name="soa",
            field=models.ForeignKey(
                default=registrar.models.dns.dns_soa.DnsSoa.get_default_pk,
                on_delete=django.db.models.deletion.SET_DEFAULT,
                related_name="+",
                to="registrar.dnssoa",
            ),
        ),
    ]
