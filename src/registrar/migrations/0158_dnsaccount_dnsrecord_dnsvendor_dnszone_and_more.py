# Generated by Django 4.2.20 on 2025-10-01 03:40

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("registrar", "0157_merge_20250910_1534"),
    ]

    operations = [
        migrations.CreateModel(
            name="DnsAccount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DnsRecord",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DnsVendor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(choices=[("cloudflare", "Cloudflare")], max_length=50)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DnsZone",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dns_account",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registrar.dnsaccount"),
                ),
                ("domain", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registrar.domain")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="VendorDnsRecord",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("record_xid", models.CharField(max_length=50)),
                ("x_created_at", models.DateTimeField()),
                ("x_updated_at", models.DateTimeField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="VendorDnsZone",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("zone_xid", models.CharField(max_length=50)),
                ("x_created_at", models.DateTimeField()),
                ("x_updated_at", models.DateTimeField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="VendorDnsAccount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("account_xid", models.CharField(max_length=50)),
                ("x_created_at", models.DateTimeField()),
                ("x_updated_at", models.DateTimeField()),
                (
                    "dns_vendor",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registrar.dnsvendor"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DnsZone_VendorDnsZone",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("dns_zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registrar.dnszone")),
                (
                    "vendor_dns_zone",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registrar.vendordnszone"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="dnszone",
            name="vendor_dns_zone",
            field=models.ManyToManyField(through="registrar.DnsZone_VendorDnsZone", to="registrar.vendordnszone"),
        ),
        migrations.CreateModel(
            name="DnsRecord_VendorDnsRecord",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_active", models.BooleanField(default=True)),
                (
                    "dns_record",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registrar.dnsrecord"),
                ),
                (
                    "vendor_dns_record",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registrar.vendordnsrecord"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="dnsrecord",
            name="dns_zone",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registrar.dnszone"),
        ),
        migrations.AddField(
            model_name="dnsrecord",
            name="vendor_dns_record",
            field=models.ManyToManyField(through="registrar.DnsRecord_VendorDnsRecord", to="registrar.vendordnsrecord"),
        ),
        migrations.CreateModel(
            name="DnsAccount_VendorDnsAccount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "dns_account",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registrar.dnsaccount"),
                ),
                (
                    "vendor_dns_account",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registrar.vendordnsaccount"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="dnsaccount",
            name="vendor_dns_account",
            field=models.ManyToManyField(
                through="registrar.DnsAccount_VendorDnsAccount", to="registrar.vendordnsaccount"
            ),
        ),
        migrations.AddConstraint(
            model_name="dnszone_vendordnszone",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True)), fields=("is_active",), name="unique_is_active_zone"
            ),
        ),
        migrations.AddConstraint(
            model_name="dnsrecord_vendordnsrecord",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True)), fields=("is_active",), name="unique_is_active_record"
            ),
        ),
        migrations.AddConstraint(
            model_name="dnsaccount_vendordnsaccount",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True)), fields=("is_active",), name="unique_is_active_account"
            ),
        ),
    ]
